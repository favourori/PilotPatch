import { useQuery } from "@tanstack/react-query";
import { useParams, Link } from "wouter";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { SeverityBadge } from "@/components/severity-badge";
import { StatusBadge } from "@/components/status-badge";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, ExternalLink, Shield, Package, Calendar } from "lucide-react";
import type { Vulnerability, Asset } from "@shared/schema";

export default function VulnerabilityDetail() {
  const params = useParams();
  const vulnerabilityId = params.id;

  const { data: vulnerability, isLoading } = useQuery<Vulnerability>({
    queryKey: ["/api/vulnerabilities", vulnerabilityId],
  });

  const { data: assets } = useQuery<Asset[]>({
    queryKey: ["/api/assets"],
    enabled: !!vulnerability,
  });

  if (isLoading) {
    return (
      <div className="flex h-full items-center justify-center">
        <div className="text-muted-foreground">Loading vulnerability details...</div>
      </div>
    );
  }

  if (!vulnerability) {
    return (
      <div className="flex h-full items-center justify-center">
        <div className="text-muted-foreground">Vulnerability not found</div>
      </div>
    );
  }

  const affectedAssets = assets?.filter((asset) =>
    vulnerability.assetIds.includes(asset.id)
  );

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-4">
        <Link href="/vulnerabilities">
          <Button variant="ghost" size="icon" data-testid="button-back">
            <ArrowLeft className="h-4 w-4" />
          </Button>
        </Link>
        <div className="flex-1">
          <div className="flex items-center gap-3">
            <code className="rounded bg-muted px-2 py-1 text-sm font-mono">
              {vulnerability.cveId}
            </code>
            <SeverityBadge
              severity={vulnerability.severity as "CRITICAL" | "HIGH" | "MEDIUM" | "LOW"}
            />
            <StatusBadge
              status={
                vulnerability.status as "OPEN" | "IN_PROGRESS" | "RESOLVED" | "ACCEPTED"
              }
            />
          </div>
          <h1 className="mt-2 text-3xl font-bold tracking-tight">
            {vulnerability.title}
          </h1>
        </div>
      </div>

      <div className="grid gap-6 lg:grid-cols-3">
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Description</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground leading-relaxed">
                {vulnerability.description}
              </p>
            </CardContent>
          </Card>

          {vulnerability.remediationSteps && (
            <Card>
              <CardHeader>
                <CardTitle>Remediation Steps</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {vulnerability.remediationSteps.split("\n").map((step, index) => (
                    <div key={index} className="flex gap-3">
                      <div className="flex h-6 w-6 items-center justify-center rounded-full bg-primary/10 text-xs font-semibold text-primary">
                        {index + 1}
                      </div>
                      <p className="flex-1 text-sm text-muted-foreground">{step}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          <Card>
            <CardHeader>
              <CardTitle>Affected Assets</CardTitle>
            </CardHeader>
            <CardContent>
              {affectedAssets && affectedAssets.length > 0 ? (
                <div className="space-y-2">
                  {affectedAssets.map((asset) => (
                    <Link key={asset.id} href="/assets">
                      <div className="flex items-center justify-between rounded-lg border border-border p-3 hover-elevate">
                        <div>
                          <p className="font-medium">{asset.name}</p>
                          <p className="text-sm text-muted-foreground">
                            {asset.type} â€¢ {asset.environment}
                          </p>
                        </div>
                        <Badge variant="outline">
                          {asset.businessCriticality}
                        </Badge>
                      </div>
                    </Link>
                  ))}
                </div>
              ) : (
                <p className="text-sm text-muted-foreground">
                  No affected assets found
                </p>
              )}
            </CardContent>
          </Card>
        </div>

        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Risk Assessment</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <div className="mb-2 flex items-center justify-between">
                  <span className="text-sm text-muted-foreground">Risk Score</span>
                  <span className="text-2xl font-bold" data-testid="text-risk-score">
                    {vulnerability.riskScore}
                  </span>
                </div>
                <div className="h-2 w-full rounded-full bg-muted">
                  <div
                    className="h-full rounded-full bg-gradient-to-r from-yellow-500 to-red-500"
                    style={{ width: `${vulnerability.riskScore}%` }}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <Shield className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm text-muted-foreground">CVSS Score</span>
                </div>
                <p className="font-mono text-lg font-semibold">
                  {vulnerability.cvssScore}
                </p>
              </div>

              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <ExternalLink className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm text-muted-foreground">Exploitability</span>
                </div>
                <Badge variant="secondary">{vulnerability.exploitability}</Badge>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <Package className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm text-muted-foreground">Source</span>
                </div>
                <p className="text-sm font-medium">{vulnerability.sourceIntegration}</p>
              </div>

              {vulnerability.affectedPackage && (
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <Package className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm text-muted-foreground">
                      Affected Package
                    </span>
                  </div>
                  <code className="block rounded bg-muted px-2 py-1 text-xs font-mono">
                    {vulnerability.affectedPackage}
                  </code>
                </div>
              )}

              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm text-muted-foreground">Detected</span>
                </div>
                <p className="text-sm">
                  {new Date(vulnerability.detectedAt).toLocaleString()}
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
