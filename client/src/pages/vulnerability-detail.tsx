import { useQuery } from "@tanstack/react-query";
import { useParams, Link } from "wouter";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { SeverityBadge } from "@/components/severity-badge";
import { StatusBadge } from "@/components/status-badge";
import { FindingTypeBadge } from "@/components/finding-type-badge";
import { Badge } from "@/components/ui/badge";
import { 
  ArrowLeft, ExternalLink, Shield, Package, Calendar, 
  AlertTriangle, User, Github, Ticket, TrendingUp, 
  FileText, CheckCircle2, XCircle, Lock, Layers
} from "lucide-react";
import type { Vulnerability, Asset } from "@shared/schema";

export default function VulnerabilityDetail() {
  const params = useParams();
  const vulnerabilityId = params.id;

  const { data: vulnerability, isLoading } = useQuery<Vulnerability>({
    queryKey: ["/api/vulnerabilities", vulnerabilityId],
  });

  const { data: assets } = useQuery<Asset[]>({
    queryKey: ["/api/assets"],
    enabled: !!vulnerability,
  });

  if (isLoading) {
    return (
      <div className="flex h-full items-center justify-center">
        <div className="text-muted-foreground">Loading vulnerability details...</div>
      </div>
    );
  }

  if (!vulnerability) {
    return (
      <div className="flex h-full items-center justify-center">
        <div className="text-muted-foreground">Vulnerability not found</div>
      </div>
    );
  }

  const affectedAssets = assets?.filter((asset) =>
    vulnerability.assetIds.includes(asset.id)
  );

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-4">
        <Link href="/vulnerabilities">
          <Button variant="ghost" size="icon" data-testid="button-back">
            <ArrowLeft className="h-4 w-4" />
          </Button>
        </Link>
        <div className="flex-1">
          <div className="flex items-center gap-3 flex-wrap">
            <code className="rounded bg-muted px-3 py-1 text-sm font-mono">
              {vulnerability.cveId}
            </code>
            <FindingTypeBadge
              findingType={vulnerability.findingType as "CODE_VULNERABILITY" | "SECRET_EXPOSURE" | "CLOUD_SECURITY"}
            />
            <SeverityBadge
              severity={vulnerability.severity as "CRITICAL" | "HIGH" | "MEDIUM" | "LOW"}
            />
            <StatusBadge
              status={
                vulnerability.status as "OPEN" | "IN_PROGRESS" | "RESOLVED" | "ACCEPTED"
              }
            />
            {vulnerability.patchAvailable && (
              <Badge variant="outline" className="bg-green-950/30 text-green-100 border-green-900/30">
                <CheckCircle2 className="h-3 w-3 mr-1" />
                Patch Available
              </Badge>
            )}
          </div>
          <h1 className="mt-3 text-3xl font-bold tracking-tight">
            {vulnerability.title}
          </h1>
        </div>
      </div>

      {/* Ownership & Tracking */}
      {(vulnerability.applicationOwner || vulnerability.githubUrl || vulnerability.ticketUrl) && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              Ownership & Tracking
            </CardTitle>
          </CardHeader>
          <CardContent className="grid gap-4 md:grid-cols-3">
            {vulnerability.applicationOwner && (
              <div className="space-y-1">
                <p className="text-sm text-muted-foreground">Application Owner</p>
                <p className="font-medium">{vulnerability.applicationOwner}</p>
              </div>
            )}
            {vulnerability.githubUrl && (
              <div className="space-y-1">
                <p className="text-sm text-muted-foreground">GitHub Issue</p>
                <a
                  href={vulnerability.githubUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center gap-1 text-primary hover:underline"
                  data-testid="link-github"
                >
                  <Github className="h-4 w-4" />
                  View on GitHub
                  <ExternalLink className="h-3 w-3" />
                </a>
              </div>
            )}
            {vulnerability.ticketUrl && (
              <div className="space-y-1">
                <p className="text-sm text-muted-foreground">Tracking Ticket</p>
                <a
                  href={vulnerability.ticketUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center gap-1 text-primary hover:underline"
                  data-testid="link-ticket"
                >
                  <Ticket className="h-4 w-4" />
                  View Ticket
                  <ExternalLink className="h-3 w-3" />
                </a>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      <div className="grid gap-6 lg:grid-cols-3">
        <div className="lg:col-span-2 space-y-6">
          {/* Description */}
          <Card>
            <CardHeader>
              <CardTitle>Description</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground leading-relaxed">
                {vulnerability.description}
              </p>
            </CardContent>
          </Card>

          {/* Attack Vector & CVSS Metrics */}
          {vulnerability.attackVector && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  Attack Vector & CVSS Metrics
                </CardTitle>
              </CardHeader>
              <CardContent className="grid gap-4 md:grid-cols-2">
                <div className="space-y-1">
                  <p className="text-sm text-muted-foreground">Attack Vector</p>
                  <Badge variant="secondary">{vulnerability.attackVector}</Badge>
                </div>
                {vulnerability.attackComplexity && (
                  <div className="space-y-1">
                    <p className="text-sm text-muted-foreground">Attack Complexity</p>
                    <Badge variant="secondary">{vulnerability.attackComplexity}</Badge>
                  </div>
                )}
                {vulnerability.privilegesRequired && (
                  <div className="space-y-1">
                    <p className="text-sm text-muted-foreground">Privileges Required</p>
                    <Badge variant="secondary">{vulnerability.privilegesRequired}</Badge>
                  </div>
                )}
                {vulnerability.userInteraction && (
                  <div className="space-y-1">
                    <p className="text-sm text-muted-foreground">User Interaction</p>
                    <Badge variant="secondary">{vulnerability.userInteraction}</Badge>
                  </div>
                )}
                {vulnerability.confidentialityImpact && (
                  <div className="space-y-1">
                    <p className="text-sm text-muted-foreground">Confidentiality Impact</p>
                    <Badge variant="outline" className={
                      vulnerability.confidentialityImpact === "HIGH" 
                        ? "bg-red-950/30 text-red-100 border-red-900/30" 
                        : "bg-yellow-950/30 text-yellow-100 border-yellow-900/30"
                    }>
                      {vulnerability.confidentialityImpact}
                    </Badge>
                  </div>
                )}
                {vulnerability.integrityImpact && (
                  <div className="space-y-1">
                    <p className="text-sm text-muted-foreground">Integrity Impact</p>
                    <Badge variant="outline" className={
                      vulnerability.integrityImpact === "HIGH" 
                        ? "bg-red-950/30 text-red-100 border-red-900/30" 
                        : "bg-yellow-950/30 text-yellow-100 border-yellow-900/30"
                    }>
                      {vulnerability.integrityImpact}
                    </Badge>
                  </div>
                )}
                {vulnerability.availabilityImpact && (
                  <div className="space-y-1">
                    <p className="text-sm text-muted-foreground">Availability Impact</p>
                    <Badge variant="outline" className={
                      vulnerability.availabilityImpact === "HIGH" 
                        ? "bg-red-950/30 text-red-100 border-red-900/30" 
                        : vulnerability.availabilityImpact === "LOW"
                        ? "bg-yellow-950/30 text-yellow-100 border-yellow-900/30"
                        : "bg-gray-950/30 text-gray-100 border-gray-900/30"
                    }>
                      {vulnerability.availabilityImpact}
                    </Badge>
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* Known Exploits & EPSS */}
          {(vulnerability.epssScore || (vulnerability.knownExploits && vulnerability.knownExploits.length > 0)) && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <AlertTriangle className="h-5 w-5 text-red-500" />
                  Exploit Intelligence
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {vulnerability.epssScore && (
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm text-muted-foreground">EPSS Score (Exploit Prediction)</span>
                      <span className="text-2xl font-bold text-red-500" data-testid="text-epss-score">
                        {vulnerability.epssScore}
                      </span>
                    </div>
                    <p className="text-xs text-muted-foreground">
                      Probability this vulnerability will be exploited in the wild
                    </p>
                  </div>
                )}
                {vulnerability.knownExploits && vulnerability.knownExploits.length > 0 && (
                  <div className="space-y-2">
                    <p className="text-sm font-medium">Known Exploits:</p>
                    <ul className="space-y-1">
                      {vulnerability.knownExploits.map((exploit, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <XCircle className="h-4 w-4 mt-0.5 text-red-500 flex-shrink-0" />
                          <span className="text-sm text-muted-foreground">{exploit}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* Compliance Impact */}
          {vulnerability.complianceImpact && vulnerability.complianceImpact.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Lock className="h-5 w-5" />
                  Compliance Impact
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2">
                  {vulnerability.complianceImpact.map((standard, index) => (
                    <Badge key={index} variant="outline" className="bg-purple-950/30 text-purple-100 border-purple-900/30">
                      {standard}
                    </Badge>
                  ))}
                </div>
                <p className="mt-3 text-sm text-muted-foreground">
                  This vulnerability may affect compliance with the above regulations and standards
                </p>
              </CardContent>
            </Card>
          )}

          {/* References & Related CVEs */}
          {((vulnerability.references && vulnerability.references.length > 0) || 
            (vulnerability.relatedCves && vulnerability.relatedCves.length > 0)) && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Layers className="h-5 w-5" />
                  References & Related CVEs
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {vulnerability.relatedCves && vulnerability.relatedCves.length > 0 && (
                  <div className="space-y-2">
                    <p className="text-sm font-medium">Related CVEs:</p>
                    <div className="flex flex-wrap gap-2">
                      {vulnerability.relatedCves.map((cve, index) => (
                        <code key={index} className="rounded bg-muted px-2 py-1 text-xs font-mono">
                          {cve}
                        </code>
                      ))}
                    </div>
                  </div>
                )}
                {vulnerability.references && vulnerability.references.length > 0 && (
                  <div className="space-y-2">
                    <p className="text-sm font-medium">External References:</p>
                    <ul className="space-y-1">
                      {vulnerability.references.map((ref, index) => (
                        <li key={index}>
                          <a
                            href={ref}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-2 text-sm text-primary hover:underline"
                          >
                            <ExternalLink className="h-3 w-3" />
                            {ref}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* Remediation Steps */}
          {vulnerability.remediationSteps && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Remediation Steps
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {vulnerability.remediationSteps.split("\n").map((step, index) => (
                    <div key={index} className="flex gap-3">
                      <div className="flex h-6 w-6 items-center justify-center rounded-full bg-primary/10 text-xs font-semibold text-primary flex-shrink-0">
                        {index + 1}
                      </div>
                      <p className="flex-1 text-sm text-muted-foreground pt-0.5">{step}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Affected Assets */}
          <Card>
            <CardHeader>
              <CardTitle>Affected Assets</CardTitle>
            </CardHeader>
            <CardContent>
              {affectedAssets && affectedAssets.length > 0 ? (
                <div className="space-y-2">
                  {affectedAssets.map((asset) => (
                    <Link key={asset.id} href="/assets">
                      <div className="flex items-center justify-between rounded-lg border border-border p-3 hover-elevate">
                        <div>
                          <p className="font-medium">{asset.name}</p>
                          <p className="text-sm text-muted-foreground">
                            {asset.type} • {asset.environment}
                          </p>
                        </div>
                        <Badge variant="outline">
                          {asset.businessCriticality}
                        </Badge>
                      </div>
                    </Link>
                  ))}
                </div>
              ) : (
                <p className="text-sm text-muted-foreground">
                  No affected assets found
                </p>
              )}
            </CardContent>
          </Card>
        </div>

        <div className="space-y-6">
          {/* Risk Assessment */}
          <Card>
            <CardHeader>
              <CardTitle>Risk Assessment</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <div className="mb-2 flex items-center justify-between">
                  <span className="text-sm text-muted-foreground">Risk Score</span>
                  <span className="text-2xl font-bold" data-testid="text-risk-score">
                    {vulnerability.riskScore}
                  </span>
                </div>
                <div className="h-2 w-full rounded-full bg-muted">
                  <div
                    className="h-full rounded-full bg-gradient-to-r from-yellow-500 to-red-500"
                    style={{ width: `${vulnerability.riskScore}%` }}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <Shield className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm text-muted-foreground">CVSS Score</span>
                </div>
                <p className="font-mono text-lg font-semibold">
                  {vulnerability.cvssScore}
                </p>
              </div>

              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <TrendingUp className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm text-muted-foreground">Exploitability</span>
                </div>
                <Badge variant="secondary">{vulnerability.exploitability}</Badge>
              </div>
            </CardContent>
          </Card>

          {/* Patch Information */}
          {vulnerability.patchAvailable && (
            <Card className="border-green-900/30">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-green-500">
                  <CheckCircle2 className="h-5 w-5" />
                  Patch Available
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {vulnerability.patchVersion && (
                  <div>
                    <p className="text-sm text-muted-foreground mb-1">Patch Version</p>
                    <code className="block rounded bg-muted px-2 py-1 text-sm font-mono">
                      {vulnerability.patchVersion}
                    </code>
                  </div>
                )}
                <p className="text-sm text-green-400">
                  A patch is available to fix this vulnerability. Update as soon as possible.
                </p>
              </CardContent>
            </Card>
          )}

          {/* Details */}
          <Card>
            <CardHeader>
              <CardTitle>Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <Package className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm text-muted-foreground">Source</span>
                </div>
                <p className="text-sm font-medium">{vulnerability.sourceIntegration}</p>
              </div>

              {vulnerability.affectedPackage && (
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <Package className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm text-muted-foreground">
                      Affected Package
                    </span>
                  </div>
                  <code className="block rounded bg-muted px-2 py-1 text-xs font-mono">
                    {vulnerability.affectedPackage}
                  </code>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Timeline */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="h-5 w-5" />
                Timeline
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {vulnerability.discoveryDate && (
                <div className="space-y-1">
                  <p className="text-xs text-muted-foreground">Discovered</p>
                  <p className="text-sm">
                    {new Date(vulnerability.discoveryDate).toLocaleDateString()}
                  </p>
                </div>
              )}
              {vulnerability.publicationDate && (
                <div className="space-y-1">
                  <p className="text-xs text-muted-foreground">Published</p>
                  <p className="text-sm">
                    {new Date(vulnerability.publicationDate).toLocaleDateString()}
                  </p>
                </div>
              )}
              <div className="space-y-1">
                <p className="text-xs text-muted-foreground">Detected in System</p>
                <p className="text-sm">
                  {new Date(vulnerability.detectedAt).toLocaleString()}
                </p>
              </div>
              <div className="space-y-1">
                <p className="text-xs text-muted-foreground">Last Updated</p>
                <p className="text-sm">
                  {new Date(vulnerability.updatedAt).toLocaleString()}
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
